<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hi</title>
  
  <subtitle>My best salutations are to them who knew me imperfect and loved me</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wenbo.fun/"/>
  <updated>2018-04-23T02:52:56.000Z</updated>
  <id>http://wenbo.fun/</id>
  
  <author>
    <name>Wen bo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CS231n学习笔记 Module 1.4</title>
    <link href="http://wenbo.fun/2018/04/18/cs231n_m1_4/"/>
    <id>http://wenbo.fun/2018/04/18/cs231n_m1_4/</id>
    <published>2018-04-18T11:00:08.000Z</published>
    <updated>2018-04-23T02:52:56.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Lecture 4 | Neural Networks&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;Part-1-Setting-up-the-Architecture&quot;&gt;&lt;a href=&quot;#Part-1-Setting-up-the-Architecture&quot; class=&quot;headerlink&quot; title=&quot;Part 1: Setting up the Architecture&quot;&gt;&lt;/a&gt;Part 1: Setting up the Architecture&lt;/h1&gt;&lt;p&gt; a single neuron might look as follows:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Neuron&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(object)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;forward&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, inputs)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot; assume inputs and weights are 1-D numpy arrays and bias is a number &quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cell_body_sum = np.sum(inputs * self.weights) + self.bias&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    firing_rate = &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt; / (&lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt; + math.exp(-cell_body_sum)) &lt;span class=&quot;comment&quot;&gt;# sigmoid activation function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; firing_rate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Sigmoid&quot;&gt;&lt;a href=&quot;#Sigmoid&quot; class=&quot;headerlink&quot; title=&quot;Sigmoid&quot;&gt;&lt;/a&gt;Sigmoid&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;(-) 在饱和的时候梯度很小,因为求gradient的时候总是需要用(local gradient) × (upstream gradient),如果local gradient很小那么网络再往前传播的时候很容易没有gradient了,网络也就不能学习.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;(-) 梯度下降权重更新时出现z字型的下降.?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Tanh&quot;&gt;&lt;a href=&quot;#Tanh&quot; class=&quot;headerlink&quot; title=&quot;Tanh&quot;&gt;&lt;/a&gt;Tanh&lt;/h2&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://wenbo.fun/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>CS231n学习笔记 Module 1.3</title>
    <link href="http://wenbo.fun/2018/04/17/cs231n_m1_3/"/>
    <id>http://wenbo.fun/2018/04/17/cs231n_m1_3/</id>
    <published>2018-04-17T02:00:08.000Z</published>
    <updated>2018-04-21T08:17:22.000Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Lecture-3-Backprop&quot;&gt;&lt;a href=&quot;#Lecture-3-Backprop&quot; class=&quot;headerlink&quot; title=&quot;Lecture 3 | Backprop&quot;&gt;&lt;/a&gt;Lecture 3 | Backprop&lt;/h1&gt;&lt;h2 id=&quot;Simple-expressions-and-interpretation-of-the-gradient&quot;&gt;&lt;a href=&quot;#Simple-expressions-and-interpretation-of-the-gradient&quot; class=&quot;headerlink&quot; title=&quot;Simple expressions and interpretation of the gradient&quot;&gt;&lt;/a&gt;Simple expressions and interpretation of the gradient&lt;/h2&gt;&lt;p&gt;max operation:&lt;br&gt;$$f(x,y) = \max(x, y) \hspace{0.5in} \rightarrow \hspace{0.5in} \frac{\partial f}{\partial x} = \mathbb{1}(x &amp;gt;= y) \hspace{0.5in} \frac{\partial f}{\partial y} = \mathbb{1}(y &amp;gt;= x)$$&lt;/p&gt;
&lt;h2 id=&quot;Compound-expressions-with-chain-rule&quot;&gt;&lt;a href=&quot;#Compound-expressions-with-chain-rule&quot; class=&quot;headerlink&quot; title=&quot;Compound expressions with chain rule&quot;&gt;&lt;/a&gt;Compound expressions with chain rule&lt;/h2&gt;&lt;p&gt;For example:$\frac{\partial f}{\partial x} = \frac{\partial f}{\partial q} \frac{\partial q}{\partial x}$ .&lt;/p&gt;
&lt;p&gt;eg.  $f(x,y,z) = (x + y) z$ 求梯度。&lt;br&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://wenbo.fun/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>CS231n学习笔记 Module 1.1</title>
    <link href="http://wenbo.fun/2018/04/11/cs231n_m1_1/"/>
    <id>http://wenbo.fun/2018/04/11/cs231n_m1_1/</id>
    <published>2018-04-11T09:15:17.000Z</published>
    <updated>2018-04-16T09:13:31.298Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Abstract&quot;&gt;&lt;a href=&quot;#Abstract&quot; class=&quot;headerlink&quot; title=&quot;Abstract&quot;&gt;&lt;/a&gt;Abstract&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Assignment Git:&lt;br&gt;&lt;a href=&quot;https://github.com/CS231n-zju/CS231n&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/CS231n-zju/CS231n&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;视频地址：&lt;br&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=vT1JzLTH4G4&amp;amp;index=2&amp;amp;list=PLe7764SJVnV10-Nr7e0sBlC9J0LRf4sQo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.youtube.com/watch?v=vT1JzLTH4G4&amp;amp;index=2&amp;amp;list=PLe7764SJVnV10-Nr7e0sBlC9J0LRf4sQo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;课程作业：&lt;br&gt;&lt;a href=&quot;http://cs231n.github.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://cs231n.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Syllabus:&lt;br&gt;&lt;a href=&quot;http://cs231n.stanford.edu/syllabus.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://cs231n.stanford.edu/syllabus.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Note翻译:&lt;br&gt;&lt;a href=&quot;http://www.52ml.net/17723.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.52ml.net/17723.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Lecture-1&quot;&gt;&lt;a href=&quot;#Lecture-1&quot; class=&quot;headerlink&quot; title=&quot;Lecture 1&quot;&gt;&lt;/a&gt;Lecture 1&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Introduction to Convolutional Neural Networks for Visual Recognition&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2012 CNN ImageNet&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://wenbo.fun/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Mean-shift clustering algorithm</title>
    <link href="http://wenbo.fun/2018/03/30/Mean-shift/"/>
    <id>http://wenbo.fun/2018/03/30/Mean-shift/</id>
    <published>2018-03-30T08:49:18.000Z</published>
    <updated>2018-04-02T14:59:36.237Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Mean-Shift算法&quot;&gt;&lt;a href=&quot;#Mean-Shift算法&quot; class=&quot;headerlink&quot; title=&quot;Mean-Shift算法&quot;&gt;&lt;/a&gt;Mean-Shift算法&lt;/h2&gt;&lt;p&gt;Mean Shift向量的基本形式定义为: $$M_h = \frac{1}{K} \sum_{x_i \in S_k}(x_i - x)  $$&lt;br&gt;$S_k$是一个半径为h的高维球区域,K表示在这n个样本点$x_i$中,有k个点落入$S_k$区域中.&lt;/p&gt;
&lt;p&gt;Meanshift向量是选取一个点为圆心，以 h 为半径做一个高维球，里面所有点与圆心为起点形成的向量相加的结果就是Meanshift向量&lt;/p&gt;
&lt;p&gt;如图所以。其中黄色箭头就是 $M_h$（meanshift向量）。&lt;/p&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                    &lt;img src=&quot;http://7xsg2l.com1.z0.glb.clouddn.com/blog/img/ms00.jpg&quot; alt=&quot;&quot; title=&quot;&quot;&gt;
                &lt;/div&gt;
                &lt;div class=&quot;image-caption&quot;&gt;&lt;/div&gt;
            &lt;/figure&gt;
    
    </summary>
    
      <category term="算法" scheme="http://wenbo.fun/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="聚类" scheme="http://wenbo.fun/tags/%E8%81%9A%E7%B1%BB/"/>
    
      <category term="算法" scheme="http://wenbo.fun/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>CS231n学习笔记 Module 1.2</title>
    <link href="http://wenbo.fun/2018/03/22/cs231n_m1_2/"/>
    <id>http://wenbo.fun/2018/03/22/cs231n_m1_2/</id>
    <published>2018-03-22T09:15:17.000Z</published>
    <updated>2018-04-02T14:57:33.593Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Abstract&quot;&gt;&lt;a href=&quot;#Abstract&quot; class=&quot;headerlink&quot; title=&quot;Abstract&quot;&gt;&lt;/a&gt;Abstract&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Assignment1 Q2 SVM:&lt;br&gt;&lt;a href=&quot;http://7xsg2l.com1.z0.glb.clouddn.com/CS/svm.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://7xsg2l.com1.z0.glb.clouddn.com/CS/svm.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;视频地址：&lt;br&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=vT1JzLTH4G4&amp;amp;index=2&amp;amp;list=PLe7764SJVnV10-Nr7e0sBlC9J0LRf4sQo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.youtube.com/watch?v=vT1JzLTH4G4&amp;amp;index=2&amp;amp;list=PLe7764SJVnV10-Nr7e0sBlC9J0LRf4sQo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;课程作业：&lt;br&gt;&lt;a href=&quot;http://cs231n.github.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://cs231n.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Syllabus:&lt;br&gt;&lt;a href=&quot;http://cs231n.stanford.edu/syllabus.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://cs231n.stanford.edu/syllabus.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Note翻译:&lt;br&gt;&lt;a href=&quot;http://www.52ml.net/17723.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.52ml.net/17723.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Module-1-2&quot;&gt;&lt;a href=&quot;#Module-1-2&quot; class=&quot;headerlink&quot; title=&quot;Module 1.2&quot;&gt;&lt;/a&gt;Module 1.2&lt;/h1&gt;&lt;h1 id=&quot;Lecture-2-Optimization&quot;&gt;&lt;a href=&quot;#Lecture-2-Optimization&quot; class=&quot;headerlink&quot; title=&quot;Lecture 2 | Optimization&quot;&gt;&lt;/a&gt;Lecture 2 | Optimization&lt;/h1&gt;&lt;p&gt;Optimization is the process of finding the set of parameters W that minimize the loss function.&lt;/p&gt;
&lt;h2 id=&quot;Visualizing-the-loss-function&quot;&gt;&lt;a href=&quot;#Visualizing-the-loss-function&quot; class=&quot;headerlink&quot; title=&quot;Visualizing the loss function&quot;&gt;&lt;/a&gt;Visualizing the loss function&lt;/h2&gt;&lt;p&gt;注意到loss function是不可微分的,由于max函数,导致函数中存在一定的不可导点(kinks).&lt;br&gt;However, the subgradient still exists and is commonly used instead.&lt;/p&gt;
&lt;h2 id=&quot;Optimization&quot;&gt;&lt;a href=&quot;#Optimization&quot; class=&quot;headerlink&quot; title=&quot;Optimization&quot;&gt;&lt;/a&gt;Optimization&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Strategy #1: A first very bad idea solution: Random search&lt;/strong&gt;&lt;br&gt;&lt;del&gt;随机选择weights,然后看哪个loss低.&lt;/del&gt;&lt;br&gt;&lt;strong&gt;Strategy #2: Random Local Search&lt;/strong&gt;&lt;br&gt;&lt;del&gt;随机选择一个方向,loss下降,才继续往下走.&lt;/del&gt;&lt;br&gt;&lt;strong&gt;Strategy #3: Following the Gradient&lt;/strong&gt;&lt;br&gt;梯度&lt;/p&gt;
&lt;p&gt;1-D function $$\frac{df(x)}{dx} = \lim_{h\ \to 0} \frac{f(x + h) - f(x)}{h}$$&lt;/p&gt;
&lt;p&gt;多维偏导数 partial derivatives&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://wenbo.fun/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Python教程笔记(3/4)</title>
    <link href="http://wenbo.fun/2018/03/09/myPython_b/"/>
    <id>http://wenbo.fun/2018/03/09/myPython_b/</id>
    <published>2018-03-09T15:24:08.000Z</published>
    <updated>2018-03-11T11:58:57.584Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;IO编程&quot;&gt;&lt;a href=&quot;#IO编程&quot; class=&quot;headerlink&quot; title=&quot;IO编程&quot;&gt;&lt;/a&gt;IO编程&lt;/h1&gt;&lt;p&gt;本章的IO编程都是同步模式&lt;/p&gt;
&lt;h2 id=&quot;文件读写&quot;&gt;&lt;a href=&quot;#文件读写&quot; class=&quot;headerlink&quot; title=&quot;文件读写&quot;&gt;&lt;/a&gt;文件读写&lt;/h2&gt;&lt;p&gt;Python内置了读写文件的函数，用法和C是兼容的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;读文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;要以读文件的模式打开一个文件对象，使用Python内置的&lt;code&gt;open()&lt;/code&gt;函数，传入文件名和标示符：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;f = open(&lt;span class=&quot;string&quot;&gt;&#39;/Users/michael/test.txt&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;r&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;标示符’r’表示读，这样，我们就成功地打开了一个文件。&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://wenbo.fun/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Python" scheme="http://wenbo.fun/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python教程笔记 (2/4)</title>
    <link href="http://wenbo.fun/2018/02/03/myPython-a/"/>
    <id>http://wenbo.fun/2018/02/03/myPython-a/</id>
    <published>2018-02-03T05:24:08.000Z</published>
    <updated>2018-03-03T18:13:14.490Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;面向对象编程&quot;&gt;&lt;a href=&quot;#面向对象编程&quot; class=&quot;headerlink&quot; title=&quot;面向对象编程&quot;&gt;&lt;/a&gt;面向对象编程&lt;/h1&gt;&lt;p&gt;面向对象编程——&lt;code&gt;Object Oriented Programming&lt;/code&gt;，简称&lt;code&gt;OOP&lt;/code&gt;，是一种程序设计思想。&lt;code&gt;OOP&lt;/code&gt;把对象作为程序的基本单元，一个对象包含了数据和操作数据的函数。&lt;br&gt;在Python中，所有数据类型都可以视为对象，当然也可以自定义对象。自定义的对象数据类型就是面向对象中的 &lt;strong&gt;类（Class）&lt;/strong&gt; 的概念。&lt;br&gt;给对象发消息实际上就是调用对象对应的关联函数，我们称之为对象的 &lt;strong&gt;方法（Method）&lt;/strong&gt;。&lt;br&gt;数据封装、继承和多态是面向对象的三大特点，我们后面会详细讲解。&lt;/p&gt;
&lt;h2 id=&quot;类和实例&quot;&gt;&lt;a href=&quot;#类和实例&quot; class=&quot;headerlink&quot; title=&quot;类和实例&quot;&gt;&lt;/a&gt;类和实例&lt;/h2&gt;&lt;p&gt;面向对象最重要的概念就是类（Class）和实例（Instance），必须牢记类是抽象的模板，比如Student类，而实例是根据类创建出来的一个个具体的“对象”，每个对象都拥有相同的方法，但各自的数据可能不同。&lt;/p&gt;
&lt;p&gt;仍以Student类为例，在Python中，定义类是通过&lt;code&gt;class&lt;/code&gt;关键字：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(object)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://wenbo.fun/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Python" scheme="http://wenbo.fun/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>ML_Foundation</title>
    <link href="http://wenbo.fun/2018/01/26/MLforward/"/>
    <id>http://wenbo.fun/2018/01/26/MLforward/</id>
    <published>2018-01-26T05:39:12.000Z</published>
    <updated>2018-02-24T06:00:32.670Z</updated>
    
    <summary type="html">
    
      &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=417250787&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;

&lt;h1 id=&quot;Linear-Algebra&quot;&gt;&lt;a href=&quot;#Linear-Algebra&quot; class=&quot;headerlink&quot; title=&quot;Linear Algebra&quot;&gt;&lt;/a&gt;Linear Algebra&lt;/h1&gt;&lt;h2 id=&quot;Point&quot;&gt;&lt;a href=&quot;#Point&quot; class=&quot;headerlink&quot; title=&quot;Point&quot;&gt;&lt;/a&gt;Point&lt;/h2&gt;&lt;ul&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input type=&quot;checkbox&quot; checked&gt; Scalar、Vector、Tensor&lt;/li&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input type=&quot;checkbox&quot; checked&gt; Identity Matrix、$A^T$ (transpose of A)&lt;/li&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input type=&quot;checkbox&quot; checked&gt; Matrix-Vector Product&lt;/li&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input type=&quot;checkbox&quot; checked&gt; Span、Generate Space、Subspace、Eigenspace&lt;/li&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input type=&quot;checkbox&quot; checked&gt; Linear Dependent、Rank&lt;/li&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input type=&quot;checkbox&quot; checked&gt; $[A|b]$ (Augmented Matrix)&lt;/li&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input type=&quot;checkbox&quot; checked&gt; Matrix Multiplication&lt;/li&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input type=&quot;checkbox&quot; checked&gt; Inverse of a Matrix&lt;/li&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input type=&quot;checkbox&quot; checked&gt; Basis&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Other" scheme="http://wenbo.fun/tags/Other/"/>
    
  </entry>
  
  <entry>
    <title>Python教程笔记(1/4)</title>
    <link href="http://wenbo.fun/2018/01/10/myPython/"/>
    <id>http://wenbo.fun/2018/01/10/myPython/</id>
    <published>2018-01-10T07:49:18.000Z</published>
    <updated>2018-03-02T02:47:16.867Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Python&quot;&gt;&lt;a href=&quot;#Python&quot; class=&quot;headerlink&quot; title=&quot;Python&quot;&gt;&lt;/a&gt;Python&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Python 3 &lt;a href=&quot;https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;From&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Python基础&quot;&gt;&lt;a href=&quot;#Python基础&quot; class=&quot;headerlink&quot; title=&quot;Python基础&quot;&gt;&lt;/a&gt;Python基础&lt;/h1&gt;&lt;p&gt;Python使用缩进来组织代码块，请务必遵守约定俗成的习惯，坚持使用4个空格的缩进。&lt;br&gt;在文本编辑器中，需要设置把Tab自动转换为4个空格，确保不混用Tab和空格。&lt;/p&gt;
&lt;h2 id=&quot;数据类型和变量&quot;&gt;&lt;a href=&quot;#数据类型和变量&quot; class=&quot;headerlink&quot; title=&quot;数据类型和变量&quot;&gt;&lt;/a&gt;数据类型和变量&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;整数&lt;/strong&gt;&lt;br&gt;十六进制用0x前缀和0-9，a-f表示。&lt;/p&gt;
&lt;p&gt;注: Python的整数没有大小限制，而某些语言的整数根据其存储长度是有大小限制的，例如Java对&lt;code&gt;32位&lt;/code&gt;整数的范围限制在-2147483648~2147483647。&lt;/p&gt;
&lt;p&gt;Python的浮点数也没有大小限制，但是超出一定范围就直接表示为inf（无限大）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Floating point numbers are usually implemented using double in C. ——Python官方文档&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;浮点数(小数)&lt;/strong&gt;&lt;br&gt;科学计数法: 0.000012可以写成&lt;code&gt;1.2e-5&lt;/code&gt;&lt;br&gt;&lt;strong&gt;字符串&lt;/strong&gt;&lt;br&gt;字符串是以单引号’或双引号”括起来的任意文本&lt;/p&gt;
&lt;p&gt;转义字符&lt;code&gt;\&lt;/code&gt;,如果字符串里面有很多字符都需要转义，就需要加很多\，为了简化，Python还允许用&lt;code&gt;r&amp;#39;&amp;#39;&lt;/code&gt;表示’’内部的字符串默认不转义.&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;print(&lt;span class=&quot;string&quot;&gt;&#39;\\\t\\&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\       \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;print(&lt;span class=&quot;string&quot;&gt;r&#39;\\\t\\&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\\\t\\&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://wenbo.fun/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Python" scheme="http://wenbo.fun/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>分支限界---批处理作业调度</title>
    <link href="http://wenbo.fun/2017/12/31/sf012/"/>
    <id>http://wenbo.fun/2017/12/31/sf012/</id>
    <published>2017-12-31T07:56:44.000Z</published>
    <updated>2018-01-13T08:16:42.846Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;批处理作业调度&quot;&gt;&lt;a href=&quot;#批处理作业调度&quot; class=&quot;headerlink&quot; title=&quot;批处理作业调度&quot;&gt;&lt;/a&gt;批处理作业调度&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;计算机算法设计与分析(第四版)，王晓东&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;n 个作业的集合: $$J={J1,J2,…,Jn}$$&lt;/li&gt;
&lt;li&gt;第 i 个作业需要机器 j 的处理时间: $$ t_{ij}$$&lt;/li&gt;
&lt;li&gt;已安排作业集合: $$M⊆{1,2…,n}$$&lt;/li&gt;
&lt;li&gt;所有作业在机器2完成时间和（包括等待时间）: $$f=\sum_{i=1}^n{F_{2i}}$$&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="算法" scheme="http://wenbo.fun/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://wenbo.fun/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>分支限界---布线问题</title>
    <link href="http://wenbo.fun/2017/12/30/sf011/"/>
    <id>http://wenbo.fun/2017/12/30/sf011/</id>
    <published>2017-12-30T11:07:34.000Z</published>
    <updated>2018-01-13T08:16:17.809Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;分支限界与回溯&quot;&gt;&lt;a href=&quot;#分支限界与回溯&quot; class=&quot;headerlink&quot; title=&quot;分支限界与回溯&quot;&gt;&lt;/a&gt;分支限界与回溯&lt;/h1&gt;&lt;h2 id=&quot;回溯法&quot;&gt;&lt;a href=&quot;#回溯法&quot; class=&quot;headerlink&quot; title=&quot;回溯法&quot;&gt;&lt;/a&gt;回溯法&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;盲目搜索&lt;/strong&gt;&lt;br&gt;从根节点出发，按照状态空间树的结构，向下搜索它的所有儿子结点，对不满足约束条件的儿子结点，把它丢弃；对满足约束条件的结点，继续相似搜索它的所有儿子结点。&lt;br&gt;该搜索过程一直进行，当搜索到一个满足约束条件的叶结点时，就得到了一个可行解；或者所有的儿子结点都不满足约束条件时，该结点就被丢弃，向上回溯到它的父亲结点。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://wenbo.fun/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://wenbo.fun/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>回溯法---0-1背包问题</title>
    <link href="http://wenbo.fun/2017/12/30/sf010/"/>
    <id>http://wenbo.fun/2017/12/30/sf010/</id>
    <published>2017-12-30T09:04:17.000Z</published>
    <updated>2018-01-13T08:27:58.058Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0-1背包问题&quot;&gt;&lt;a href=&quot;#0-1背包问题&quot; class=&quot;headerlink&quot; title=&quot;0-1背包问题&quot;&gt;&lt;/a&gt;0-1背包问题&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;计算机算法设计与分析(第四版)，王晓东&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;时间复杂度&quot;&gt;&lt;a href=&quot;#时间复杂度&quot; class=&quot;headerlink&quot; title=&quot;时间复杂度&quot;&gt;&lt;/a&gt;时间复杂度&lt;/h2&gt;&lt;p&gt;计算上界时间:$$O(n)$$&lt;/p&gt;
&lt;p&gt;最坏情况有:$$O(2^n)$$个右儿子节点需计算上界。所以回溯算法&lt;code&gt;Backtrack&lt;/code&gt;所需时间:$$O(n2^n)$$&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://wenbo.fun/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://wenbo.fun/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>回溯法---符号三角形</title>
    <link href="http://wenbo.fun/2017/12/30/sf009/"/>
    <id>http://wenbo.fun/2017/12/30/sf009/</id>
    <published>2017-12-30T05:07:21.000Z</published>
    <updated>2018-01-13T08:18:24.339Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;回溯法&quot;&gt;&lt;a href=&quot;#回溯法&quot; class=&quot;headerlink&quot; title=&quot;回溯法&quot;&gt;&lt;/a&gt;回溯法&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;问题解空间&lt;/li&gt;
&lt;li&gt;&lt;p&gt;深度优先遍历&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;深度搜索至任意一个节点，若包括问题解，继续按深度优先策略搜索;如果不包含问题解，则跳过对该结点为根的子树的搜索，逐层向其祖先结点回溯。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;减枝函数&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;符号三角形&quot;&gt;&lt;a href=&quot;#符号三角形&quot; class=&quot;headerlink&quot; title=&quot;符号三角形&quot;&gt;&lt;/a&gt;符号三角形&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;计算机算法设计与分析(第四版)，王晓东&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;时间复杂度&quot;&gt;&lt;a href=&quot;#时间复杂度&quot; class=&quot;headerlink&quot; title=&quot;时间复杂度&quot;&gt;&lt;/a&gt;时间复杂度&lt;/h2&gt;&lt;p&gt;计算可行性约束(符号个数)需要时间:$$O(n)$$&lt;br&gt;最坏情况(n个符号排列)有:$$O(2^n)$$个节点需要计算可行性约束，故回溯算法 &lt;code&gt;Backtrack&lt;/code&gt; 所需计算时间: $$O(n2^n)$$&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://wenbo.fun/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://wenbo.fun/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>贪心算法---最小生成树</title>
    <link href="http://wenbo.fun/2017/12/30/sf008/"/>
    <id>http://wenbo.fun/2017/12/30/sf008/</id>
    <published>2017-12-30T03:17:39.000Z</published>
    <updated>2018-01-13T08:18:36.044Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;最小生成树&quot;&gt;&lt;a href=&quot;#最小生成树&quot; class=&quot;headerlink&quot; title=&quot;最小生成树&quot;&gt;&lt;/a&gt;最小生成树&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;计算机算法设计与分析(第四版)，王晓东&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;最小生成树性质&quot;&gt;&lt;a href=&quot;#最小生成树性质&quot; class=&quot;headerlink&quot; title=&quot;最小生成树性质&quot;&gt;&lt;/a&gt;最小生成树性质&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;假设 N = (V,{ E })是一个连通网，U 是顶点集 V 的一个非空子集。若(u , v)是一条具有最小权值(代价)的边，其中u∈U， v∈V - U，则必存在一棵包含边(u，v)的最小生成树。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;反证:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;假设网N的任何一棵最小生成树都不包含(u，v)。设T是连通网上的一棵最小生成树，当将边(u，v)加入到T中时，由生成树的定义，T中必存在一条包含(u，v)的回路。另一方面，由于T是生成树，则在T上必存在另一条边(u’，v’)，其中u’∈U，v’∈V - U，且u和u’之间，v和v’之间均有路径相通。删去边(u’，v’)，便可消除上述回路，同时得到另一棵生成树T’。因为(u，v)的代价不高于(u’，v’)，则T’的代价亦不高于T，T’是包含(u，v)的一棵最小生成树，和假设矛盾。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;时间复杂度&quot;&gt;&lt;a href=&quot;#时间复杂度&quot; class=&quot;headerlink&quot; title=&quot;时间复杂度&quot;&gt;&lt;/a&gt;时间复杂度&lt;/h2&gt;
    
    </summary>
    
      <category term="算法" scheme="http://wenbo.fun/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://wenbo.fun/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>贪心算法---单源最短路径</title>
    <link href="http://wenbo.fun/2017/12/30/sf007/"/>
    <id>http://wenbo.fun/2017/12/30/sf007/</id>
    <published>2017-12-30T02:34:34.000Z</published>
    <updated>2018-01-13T08:18:44.664Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;单源最短路径&quot;&gt;&lt;a href=&quot;#单源最短路径&quot; class=&quot;headerlink&quot; title=&quot;单源最短路径&quot;&gt;&lt;/a&gt;单源最短路径&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;计算机算法设计与分析(第四版)，王晓东&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;给定一个带权有向图 G=（V,E），其中每条边的权是一个非负实数。另外，还给定V中的一个顶点，称为源。现在要计算从源到其他所有各顶点的最短路径长度。这里的长度就是指路上各边权之和。&lt;/p&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                    &lt;img src=&quot;http://7xsg2l.com1.z0.glb.clouddn.com/blog/dijkstra/tx02.jpg&quot; alt=&quot;&quot; title=&quot;&quot;&gt;
                &lt;/div&gt;
                &lt;div class=&quot;image-caption&quot;&gt;&lt;/div&gt;
            &lt;/figure&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                    &lt;img src=&quot;http://7xsg2l.com1.z0.glb.clouddn.com/blog/dijkstra/tx01.jpg&quot; alt=&quot;&quot; title=&quot;&quot;&gt;
                &lt;/div&gt;
                &lt;div class=&quot;image-caption&quot;&gt;&lt;/div&gt;
            &lt;/figure&gt;  
&lt;p&gt;其基本思想是，设置顶点集合&lt;code&gt;S&lt;/code&gt;并不断地作贪心选择来扩充这个集合。每一次加入&lt;code&gt;S&lt;/code&gt; 的点都是距离&lt;code&gt;S&lt;/code&gt;之外最短的点。&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="http://wenbo.fun/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://wenbo.fun/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>贪心算法---活动安排问题</title>
    <link href="http://wenbo.fun/2017/12/28/sf006/"/>
    <id>http://wenbo.fun/2017/12/28/sf006/</id>
    <published>2017-12-28T11:46:02.000Z</published>
    <updated>2018-01-13T08:18:52.894Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;活动安排问题&quot;&gt;&lt;a href=&quot;#活动安排问题&quot; class=&quot;headerlink&quot; title=&quot;活动安排问题&quot;&gt;&lt;/a&gt;活动安排问题&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;计算机算法设计与分析(第四版)，王晓东&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;贪心选择性质&quot;&gt;&lt;a href=&quot;#贪心选择性质&quot; class=&quot;headerlink&quot; title=&quot;贪心选择性质&quot;&gt;&lt;/a&gt;贪心选择性质&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;所谓贪心选择性质是指所求问题的整体最优解可以通过一系列局部最优的选择.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;动态规划: 每步所做的选择往往依赖于相关子问题的解。只有解除子问题的解才能做出选择。_自底向上_&lt;/li&gt;
&lt;li&gt;贪心算法: 仅在当前状态下做出最好选择，即局部最优选择。_自顶向下_&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于一个具体问题，要确定它是否具有 &lt;strong&gt;贪心选择性质&lt;/strong&gt;,&lt;font color=&quot;red&quot;&gt;必须证明每一步所作的贪心选择最终导致问题的整体最优解。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt; 活动安排问题贪的是 &lt;strong&gt;活动最早完成时间&lt;/strong&gt; ，直观上为未安排活动留下更多时间。&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="http://wenbo.fun/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://wenbo.fun/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>动态规划---最长公共子序列</title>
    <link href="http://wenbo.fun/2017/12/26/sf005/"/>
    <id>http://wenbo.fun/2017/12/26/sf005/</id>
    <published>2017-12-26T11:33:31.000Z</published>
    <updated>2018-01-13T08:19:45.989Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;最长公共子序列&quot;&gt;&lt;a href=&quot;#最长公共子序列&quot; class=&quot;headerlink&quot; title=&quot;最长公共子序列&quot;&gt;&lt;/a&gt;最长公共子序列&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;计算机算法设计与分析(第四版)，王晓东&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;最优子结构性质&quot;&gt;&lt;a href=&quot;#最优子结构性质&quot; class=&quot;headerlink&quot; title=&quot;最优子结构性质&quot;&gt;&lt;/a&gt;最优子结构性质&lt;/h2&gt;&lt;p&gt;设序列 X={x1,x2,…,xm} 和 Y={y1,y2,…,yn} 的最长公共子序列为 Z={z1,z2,…,zk} ，则&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;若xm=yn，则zk=xm=yn，且Z k-1是xm-1和yn-1的最长公共子序列。&lt;/li&gt;
&lt;li&gt;若xm≠yn且zk≠xm，则Z是xm-1和Y的最长公共子序列。&lt;/li&gt;
&lt;li&gt;若xm≠yn且zk≠yn，则Z是X和yn-1的最长公共子序列。  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;两个序列的最长公共子序列包含了这两个序列的前缀的最长公共子序列。因此，最长公共子序列问题具有 &lt;strong&gt;最优子结构性质&lt;/strong&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="http://wenbo.fun/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://wenbo.fun/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>动态规划---矩阵连乘</title>
    <link href="http://wenbo.fun/2017/12/23/sf004/"/>
    <id>http://wenbo.fun/2017/12/23/sf004/</id>
    <published>2017-12-23T14:08:08.000Z</published>
    <updated>2018-01-13T08:20:08.908Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;矩阵连乘&quot;&gt;&lt;a href=&quot;#矩阵连乘&quot; class=&quot;headerlink&quot; title=&quot;矩阵连乘&quot;&gt;&lt;/a&gt;矩阵连乘&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;计算机算法设计与分析(第四版)，王晓东&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;动态规划基本要素&quot;&gt;&lt;a href=&quot;#动态规划基本要素&quot; class=&quot;headerlink&quot; title=&quot;动态规划基本要素&quot;&gt;&lt;/a&gt;动态规划基本要素&lt;/h2&gt;&lt;h3 id=&quot;最优子结构&quot;&gt;&lt;a href=&quot;#最优子结构&quot; class=&quot;headerlink&quot; title=&quot;最优子结构&quot;&gt;&lt;/a&gt;最优子结构&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;当一个问题的最优解包括其子问题的最优解时，称此问题具有最优子结构性质。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;计算 A[1:n] 的最优次序，其所包含的矩阵子链 A[1:k] 和 A[k+1:n] 的次序也是最优的。即该问题具有 &lt;strong&gt;最优子结构性质&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;反证法证明：如果有一个计算 A[1:k] 的次序需要的计算量更少，则用此次序替换原来计算 A[1:k] 次序，得到的计算 A[1:n] 的计算量将比按最优次序计算量更少，这与前提矛盾。&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="http://wenbo.fun/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://wenbo.fun/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>递归与分治---快速排序</title>
    <link href="http://wenbo.fun/2017/12/22/sf003/"/>
    <id>http://wenbo.fun/2017/12/22/sf003/</id>
    <published>2017-12-22T11:33:07.000Z</published>
    <updated>2018-01-13T08:20:21.991Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;快速排序&quot;&gt;&lt;a href=&quot;#快速排序&quot; class=&quot;headerlink&quot; title=&quot;快速排序&quot;&gt;&lt;/a&gt;快速排序&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;计算机算法设计与分析(第四版)，王晓东&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;时间复杂度分析&quot;&gt;&lt;a href=&quot;#时间复杂度分析&quot; class=&quot;headerlink&quot; title=&quot;时间复杂度分析&quot;&gt;&lt;/a&gt;时间复杂度分析&lt;/h2&gt;&lt;p&gt;最坏情况:每次划分的基准刚好为中值。&lt;br&gt;        $$T(n)=2*T(n/2)+n$$&lt;/p&gt;
&lt;p&gt;其平均算法复杂度为:&lt;br&gt;          $$O(nlogn)$$&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://wenbo.fun/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://wenbo.fun/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>递归与分治---合并排序</title>
    <link href="http://wenbo.fun/2017/12/22/sf002/"/>
    <id>http://wenbo.fun/2017/12/22/sf002/</id>
    <published>2017-12-22T01:55:32.000Z</published>
    <updated>2018-01-13T08:20:37.488Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;合并排序-归并排序&quot;&gt;&lt;a href=&quot;#合并排序-归并排序&quot; class=&quot;headerlink&quot; title=&quot;合并排序 (归并排序)&quot;&gt;&lt;/a&gt;合并排序 (归并排序)&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;计算机算法设计与分析(第四版)，王晓东&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;时间复杂度分析&quot;&gt;&lt;a href=&quot;#时间复杂度分析&quot; class=&quot;headerlink&quot; title=&quot;时间复杂度分析&quot;&gt;&lt;/a&gt;时间复杂度分析&lt;/h2&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                    &lt;img src=&quot;http://7xsg2l.com1.z0.glb.clouddn.com/blog/img/%E7%AE%97%E6%B3%95q8.jpg&quot; alt=&quot;&quot; title=&quot;&quot;&gt;
                &lt;/div&gt;
                &lt;div class=&quot;image-caption&quot;&gt;&lt;/div&gt;
            &lt;/figure&gt;
    
    </summary>
    
      <category term="算法" scheme="http://wenbo.fun/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://wenbo.fun/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
